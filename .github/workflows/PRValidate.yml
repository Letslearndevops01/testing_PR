name: Validate Commit Messages

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

jobs:
  validate-commit-message:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches and tags

      - name: Fetch main branch
        run: git fetch origin main

      - name: Fetch PR commits
        run: |
          COMMITS=$(git log origin/main..HEAD --pretty=format:"%s")
          echo "$COMMITS" > commits.txt

      - name: Validate commit messages
        run: |
          REGEX='^[A-Za-z]{4}-[0-9]{4}$'
          ERROR=0
          echo "üîç Checking commit messages..."

          while read -r COMMIT; do
            if [[ -z "$COMMIT" ]] || \
               [[ "$COMMIT" == "Initial commit" ]] || \
               [[ "$COMMIT" == "Create initial commit" ]] || \
               [[ "$COMMIT" =~ ^Merge\ pull\ request.*$ ]] || \
               [[ "$COMMIT" =~ ^Merge\ branch.*$ ]] || \
               [[ "$COMMIT" =~ ^Merge\ [0-9a-f]{40}\ into\ [0-9a-f]{40}$ ]] || \
               [[ "$COMMIT" =~ ^Merge\ remote-tracking\ branch.*$ ]] || \
               [[ "$COMMIT" =~ ^Update\.*$ ]] || \
               [[ "$COMMIT" =~ ^Bump\.*$ ]]; then
              echo "‚ö†Ô∏è  Skipping GitHub-generated/default commit: $COMMIT"
              continue
            fi

            echo "Checking: $COMMIT"
            if [[ ! $COMMIT =~ $REGEX ]]; then
              echo "‚ùå Invalid commit message: $COMMIT"
              ERROR=1
            fi
          done < commits.txt

          if [[ $ERROR -eq 1 ]]; then
            echo "‚ùå One or more commit messages are invalid."
            echo "üëâ Must match: 4 letters, dash, 4 numbers (e.g., ABCD-1234)"
            exit 1
          else
            echo "‚úÖ All commit messages are valid."
          fi